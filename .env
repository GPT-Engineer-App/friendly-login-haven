VITE_SUPABASE_PROJECT_URL=https://fckcskbtwprioigueqmb.supabase.co
VITE_SUPABASE_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZja2Nza2J0d3ByaW9pZ3VlcW1iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjMzODA3MzksImV4cCI6MjAzODk1NjczOX0.Ux8BsOvobEGfzPvSXvBVm2YhzWr1uB9eE3y3Aqt6sbU
VITE_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZja2Nza2J0d3ByaW9pZ3VlcW1iIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyMzM4MDczOSwiZXhwIjoyMDM4OTU2NzM5fQ.Ue9Aw-Ew5Rl2Ue9Aw-Ew5Rl2Ue9Aw-Ew5Rl2Ue9Aw-Ew5Rl2

-- Create a function to handle employee folder creation and policy setup
CREATE OR REPLACE FUNCTION create_employee_folder(emp_id TEXT, user_id UUID)
RETURNS VOID AS $$
DECLARE
    root_bucket TEXT := 'user_documents';
    folder_path TEXT;
BEGIN
    -- Create a unique folder path for the employee
    folder_path := 'employee_' || emp_id || '/';

    -- Create an empty file to ensure the folder exists
    PERFORM storage.create_object(root_bucket, folder_path || '.keep', '');

    -- Set up folder-level policies
    PERFORM storage.create_policy(
        root_bucket,
        'read',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'insert',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'update',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'delete',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
END;
$$ LANGUAGE plpgsql;
RETURNS VOID AS $$
DECLARE
    root_bucket TEXT := 'user_documents';
    folder_path TEXT;
BEGIN
    -- Create a unique folder path for the employee
    folder_path := 'employee_' || emp_id || '/';

    -- Create an empty file to ensure the folder exists
    PERFORM storage.upload(root_bucket, folder_path || '.keep', '');

    -- Set up folder-level policies
    PERFORM storage.create_policy(
        root_bucket,
        'read',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'insert',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'update',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
    PERFORM storage.create_policy(
        root_bucket,
        'delete',
        'authenticated',
        storage.foldername(name) = folder_path AND auth.uid() = user_id::TEXT
    );
END;
$$ LANGUAGE plpgsql;

-- SQL query to create the hrms_employees table

-- Create storage policies for employee buckets
CREATE POLICY "Admins can access all folders in user_documents"
ON storage.objects
FOR ALL
USING (bucket_id = 'user_documents' AND auth.role() = 'admin');

CREATE POLICY "Users can access their own folder in user_documents"
ON storage.objects
FOR ALL
USING (
    bucket_id = 'user_documents' 
    AND auth.role() = 'authenticated'
    AND (storage.foldername(name))[1] = 'employee_' || (
        SELECT emp_id::text 
        FROM users 
        WHERE user_id = auth.uid()
    )
);

CREATE TABLE hrms_employees (
    id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    emp_id VARCHAR(50) NOT NULL UNIQUE,

-- Create documents table
CREATE TABLE documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    emp_id VARCHAR(50),
    user_id UUID,
    file_name TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_type TEXT,
    uploaded_by UUID,
    uploaded_at TIMESTAMPTZ DEFAULT NOW(),
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (uploaded_by) REFERENCES users(user_id)
);

-- Create index on emp_id for faster lookups
CREATE INDEX idx_documents_emp_id ON documents(emp_id);
    role employee_role_enum NOT NULL,
    created_dt TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(255) REFERENCES users(email),
    last_upd TIMESTAMPTZ,
    last_upd_by VARCHAR(255),
    designation VARCHAR(100),
    date_of_joining DATE,
    phone_num VARCHAR(20),
    address TEXT,
    dob DATE,
    emergency_contact VARCHAR(100)
);

-- Add foreign key constraint for created_by
ALTER TABLE hrms_employees
ADD CONSTRAINT employees_created_by_fkey
FOREIGN KEY (created_by)
REFERENCES users(email);

-- Remove the employees_updated_by_fkey constraint
-- Note: This is not needed if the constraint doesn't exist in the current schema
-- ALTER TABLE hrms_employees
-- DROP CONSTRAINT IF EXISTS employees_updated_by_fkey;

-- Add a trigger to automatically update last_upd
CREATE OR REPLACE FUNCTION update_last_upd()
RETURNS TRIGGER AS $$
BEGIN
    NEW.last_upd = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_hrms_employees_last_upd
BEFORE UPDATE ON hrms_employees
FOR EACH ROW
EXECUTE FUNCTION update_last_upd();



-- Create an enum type for employee roles if it doesn't exist

CREATE TYPE employee_role_enum AS ENUM ('admin', 'manager', 'employee', 'hr');



-- Add any necessary indexes

CREATE INDEX idx_hrms_employees_emp_id ON hrms_employees(emp_id);

CREATE INDEX idx_hrms_employees_email ON hrms_employees(email);



-- Set up Row Level Security (RLS)

ALTER TABLE hrms_employees ENABLE ROW LEVEL SECURITY;



-- Create policies for different roles

CREATE POLICY "Admins have full access" ON hrms_employees

    FOR ALL USING (auth.role() = 'admin');



CREATE POLICY "HR can view and edit all employees" ON hrms_employees

    FOR ALL USING (auth.role() = 'hr');



CREATE POLICY "Managers can view all employees but edit only their team" ON hrms_employees

    FOR SELECT USING (auth.role() = 'manager')

    WITH CHECK (auth.role() = 'manager' AND created_by = auth.uid());



CREATE POLICY "Employees can view and edit only their own data" ON hrms_employees

    FOR ALL USING (auth.role() = 'employee' AND emp_id = auth.uid());
